version: '3.8'

services:
  mofa-developer-page:
    build: .
    container_name: mofa-developer-page
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mofa-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mofa-dev.rule=Host(`*.mofa.ai`) || Host(`*.liyao.space`)"
      - "traefik.http.routers.mofa-dev.tls=true"
      - "traefik.http.routers.mofa-dev.tls.certresolver=letsencrypt"
      - "traefik.http.services.mofa-dev.loadbalancer.server.port=3000"

  # Nginx 反向代理（可选，如果不使用 Traefik）
  nginx:
    image: nginx:alpine
    container_name: mofa-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf.example:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/ssl/certs  # SSL 证书目录
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mofa-developer-page
    networks:
      - mofa-network
    profiles:
      - nginx  # 使用 --profile nginx 启动

  # Redis 缓存（可选，用于更高级的缓存）
  redis:
    image: redis:7-alpine
    container_name: mofa-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mofa-network
    profiles:
      - redis  # 使用 --profile redis 启动

  # 监控和日志（可选）
  portainer:
    image: portainer/portainer-ce:latest
    container_name: mofa-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - mofa-network
    profiles:
      - monitor  # 使用 --profile monitor 启动

networks:
  mofa-network:
    driver: bridge

volumes:
  redis_data:
  portainer_data: